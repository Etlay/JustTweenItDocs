{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JustTweenIt \u00b6 //TODO: add media icon here JustTweenIt is a high performance tween plugin for Unity. It is written on ECS architecture. The main goal of JustTweenIt is provide convenient and easy API to animate entities and user custom data in pure ECS style. ECS architecture and Data Oriented Stack provides better performance in comparison with regular OOP. More information about ECS you can find here","title":"Overview"},{"location":"#welcome-to-justtweenit","text":"//TODO: add media icon here JustTweenIt is a high performance tween plugin for Unity. It is written on ECS architecture. The main goal of JustTweenIt is provide convenient and easy API to animate entities and user custom data in pure ECS style. ECS architecture and Data Oriented Stack provides better performance in comparison with regular OOP. More information about ECS you can find here","title":"Welcome to JustTweenIt"},{"location":"BasicConcepts/","text":"Basic Concepts \u00b6 JTweenSequence \u00b6 In JustTweenIt each tween is represented as a sequence of animations. To create a tween you should create a sequence on target entity and add animations to it: var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); You can start, pause and stop playing sequence: moveSequence . Play ( dstManager ); moveSequence . Pause ( dstManager ); moveSequence . Stop ( dstManager ); moveSequence . DestroySequence ( dstManager ); Also you can setup sequence loop count and type: moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); JustTweenIt supports 3 types of loops: Loop; LoopReverse; PinPong; JTweenAnimation \u00b6 JTweenAnimation is a smallest peace of tween sequence. JustTweenIt provides several default animation implementations along with supporting custom user animations; In package you can find animations for: Transforms: Move; Rotate; Scale; Shake; Colors: Lerp; Gradients; JTween System Groups \u00b6 JTween providers serveral system groups to user custom animations, such as: JTweenSystemGroup - is a main group of the JustTweenIt plugin. All systems and system groups executed in this system group. This system group executes in the Unity default SimulationSystemGroup; JTweenInitAnimationsSystemGroup - this groups contains systems for initialization animations before playing such as caching previous object position or randomizing shake. JTweenUpdateAnimationsSystemGroup - this group contains systems with logic for updating animations, such as moving and rotation objects. JTweenFinishAnimationSystemGroup - in this group can be made additional logic after finishing animation and before starting next animation in sequence. Configure Tween In the Editor \u00b6 The easiest way way to create tween is to setup it in the Inspector. To do it, you should add JTweenSequenceAuthoring component on Game Object. After that you can add animations to the sequence in the Inspector menu. In plugin provided examples, scene 1: Example 1 - Configue tween from authoring components shows how to configure tweens in the scene. Create and run tweens from the main thread \u00b6 JustTweenIt creates sequence and animations in the main thread. In plugin provided examples, scene 2: Example 2 - Run tween from code in monobehavior shows how to create tween during conversion state. To create a sequence you should call AddSequences(EntityManager entityManager) method on an entity you want animate. public class ExampleRunTweenFromMonobehavior : MonoBehaviour , IConvertGameObjectToEntity { public void Convert ( Entity entity , EntityManager dstManager , GameObjectConversionSystem conversionSystem ) { var rotateSequence = entity . AddSequence ( dstManager ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( dstManager ); var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( dstManager ); var scaleSequence = entity . AddSequence ( dstManager ); scaleSequence . Scale ( dstManager , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( dstManager , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( dstManager ); var colorSequence = entity . AddSequence ( dstManager ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( dstManager ); } } Create and run tweens from the job system \u00b6 JustTweenIt also supports creating tweens in job system in parallel way. You can find this example in scene 3: Example 3 - Run tween from jobsystem Creating tweens in the job system is a bit faster than on the main thread. It happens because JustTweenIt makes some pre-calculation of the data before add it to the ECS. All structural changes happen in JTweenPlaySequenceCommandsSystem on the main thread. [UpdateInGroup(typeof(ExampleSystemsGroup))] public class ExampleRunTweenFromJobSystem : SystemBase { private JTweenBeginSimulationEntityCommandBufferSystem _commandBufferSystem ; protected override void OnCreate () { base . OnCreate (); _commandBufferSystem = World . GetExistingSystem < JTweenBeginSimulationEntityCommandBufferSystem >(); } protected override void OnUpdate () { var commandBuffer = _commandBufferSystem . CreateCommandBuffer (). ToConcurrent (); Entities . WithAll < ExampleTweenTarget >(). ForEach (( Entity entity , int entityInQueryIndex ) => { var moveSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var moveCommandBuffer ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer ); var rotateSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var rotateCommandBuffer ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer ); var scaleSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var scaleCommandBuffer ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer ); var colorSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var colorCommandBuffer ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer ); }). ScheduleParallel (); _commandBufferSystem . AddJobHandleForProducer ( Dependency ); Enabled = false ; //disable test system after running animation } } Process sequence callbacks and states \u00b6 You can process callback from sequence by working with tags-components. Scene 6: Example 6 - Swapn from prefab and process callbacks shows how to process finishing sequence: // process finish sequence callback. Burst disabled only for Debug.Log. You can safely process callbacks in jobs Entities . WithoutBurst (). WithAll < JTweenFinishedSequence >(). ForEach (( JTweenSequence sequence ) => { Debug . Log ( $ \"Sequence {sequence} finished!\" ); }). Run (); JustTweenIt supports such states for sequences: JTweenPlayingSequence JTweenFinishedSequence JTweenPausedSequence JTweenNotStartedSequence Also you can process additional states in custom animations, such as: JTweenInitAnimation JTweenPlayingAnimation JTweenFinishedAnimation JTweenPausedAnimation JTweenAnimationPlayBackward JTweenAnimationPlayForward Warning For processing JTweenInitAnimation state you should place your system into JTweenInitAnimationsSystemGroup ; For processing JTweenPlayingAnimation state you should place your system into JTweenUpdateAnimationsSystemGroup ; For processing JTweenFinishedAnimation state you should place your system into JTweenFinishAnimationSystemGroup ;","title":"Basic concepts"},{"location":"BasicConcepts/#basic-concepts","text":"","title":"Basic Concepts"},{"location":"BasicConcepts/#jtweensequence","text":"In JustTweenIt each tween is represented as a sequence of animations. To create a tween you should create a sequence on target entity and add animations to it: var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); You can start, pause and stop playing sequence: moveSequence . Play ( dstManager ); moveSequence . Pause ( dstManager ); moveSequence . Stop ( dstManager ); moveSequence . DestroySequence ( dstManager ); Also you can setup sequence loop count and type: moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); JustTweenIt supports 3 types of loops: Loop; LoopReverse; PinPong;","title":"JTweenSequence"},{"location":"BasicConcepts/#jtweenanimation","text":"JTweenAnimation is a smallest peace of tween sequence. JustTweenIt provides several default animation implementations along with supporting custom user animations; In package you can find animations for: Transforms: Move; Rotate; Scale; Shake; Colors: Lerp; Gradients;","title":"JTweenAnimation"},{"location":"BasicConcepts/#jtween-system-groups","text":"JTween providers serveral system groups to user custom animations, such as: JTweenSystemGroup - is a main group of the JustTweenIt plugin. All systems and system groups executed in this system group. This system group executes in the Unity default SimulationSystemGroup; JTweenInitAnimationsSystemGroup - this groups contains systems for initialization animations before playing such as caching previous object position or randomizing shake. JTweenUpdateAnimationsSystemGroup - this group contains systems with logic for updating animations, such as moving and rotation objects. JTweenFinishAnimationSystemGroup - in this group can be made additional logic after finishing animation and before starting next animation in sequence.","title":"JTween System Groups"},{"location":"BasicConcepts/#configure-tween-in-the-editor","text":"The easiest way way to create tween is to setup it in the Inspector. To do it, you should add JTweenSequenceAuthoring component on Game Object. After that you can add animations to the sequence in the Inspector menu. In plugin provided examples, scene 1: Example 1 - Configue tween from authoring components shows how to configure tweens in the scene.","title":"Configure Tween In the Editor"},{"location":"BasicConcepts/#create-and-run-tweens-from-the-main-thread","text":"JustTweenIt creates sequence and animations in the main thread. In plugin provided examples, scene 2: Example 2 - Run tween from code in monobehavior shows how to create tween during conversion state. To create a sequence you should call AddSequences(EntityManager entityManager) method on an entity you want animate. public class ExampleRunTweenFromMonobehavior : MonoBehaviour , IConvertGameObjectToEntity { public void Convert ( Entity entity , EntityManager dstManager , GameObjectConversionSystem conversionSystem ) { var rotateSequence = entity . AddSequence ( dstManager ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( dstManager ); var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( dstManager ); var scaleSequence = entity . AddSequence ( dstManager ); scaleSequence . Scale ( dstManager , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( dstManager , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( dstManager ); var colorSequence = entity . AddSequence ( dstManager ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( dstManager ); } }","title":"Create and run tweens from the main thread"},{"location":"BasicConcepts/#create-and-run-tweens-from-the-job-system","text":"JustTweenIt also supports creating tweens in job system in parallel way. You can find this example in scene 3: Example 3 - Run tween from jobsystem Creating tweens in the job system is a bit faster than on the main thread. It happens because JustTweenIt makes some pre-calculation of the data before add it to the ECS. All structural changes happen in JTweenPlaySequenceCommandsSystem on the main thread. [UpdateInGroup(typeof(ExampleSystemsGroup))] public class ExampleRunTweenFromJobSystem : SystemBase { private JTweenBeginSimulationEntityCommandBufferSystem _commandBufferSystem ; protected override void OnCreate () { base . OnCreate (); _commandBufferSystem = World . GetExistingSystem < JTweenBeginSimulationEntityCommandBufferSystem >(); } protected override void OnUpdate () { var commandBuffer = _commandBufferSystem . CreateCommandBuffer (). ToConcurrent (); Entities . WithAll < ExampleTweenTarget >(). ForEach (( Entity entity , int entityInQueryIndex ) => { var moveSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var moveCommandBuffer ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer ); var rotateSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var rotateCommandBuffer ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer ); var scaleSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var scaleCommandBuffer ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer ); var colorSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var colorCommandBuffer ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer ); }). ScheduleParallel (); _commandBufferSystem . AddJobHandleForProducer ( Dependency ); Enabled = false ; //disable test system after running animation } }","title":"Create and run tweens from the job system"},{"location":"BasicConcepts/#process-sequence-callbacks-and-states","text":"You can process callback from sequence by working with tags-components. Scene 6: Example 6 - Swapn from prefab and process callbacks shows how to process finishing sequence: // process finish sequence callback. Burst disabled only for Debug.Log. You can safely process callbacks in jobs Entities . WithoutBurst (). WithAll < JTweenFinishedSequence >(). ForEach (( JTweenSequence sequence ) => { Debug . Log ( $ \"Sequence {sequence} finished!\" ); }). Run (); JustTweenIt supports such states for sequences: JTweenPlayingSequence JTweenFinishedSequence JTweenPausedSequence JTweenNotStartedSequence Also you can process additional states in custom animations, such as: JTweenInitAnimation JTweenPlayingAnimation JTweenFinishedAnimation JTweenPausedAnimation JTweenAnimationPlayBackward JTweenAnimationPlayForward Warning For processing JTweenInitAnimation state you should place your system into JTweenInitAnimationsSystemGroup ; For processing JTweenPlayingAnimation state you should place your system into JTweenUpdateAnimationsSystemGroup ; For processing JTweenFinishedAnimation state you should place your system into JTweenFinishAnimationSystemGroup ;","title":"Process sequence callbacks and states"},{"location":"BuiltInAnimations/","text":"BuiltIn animations \u00b6 Core \u00b6 JustTweenIt provides two different methods for builtIn animations: for the main thread and scheduled jobs. Methods for the main thread have optional parameters GameObjectConversionSystem conversionSystem and Component targetComponent . This parameters are used during conversion stage on ECS . Move Tweens \u00b6 Move \u00b6 Move - moves Translation component on moveDelta in durationSeconds Main thread API: public static void Move ( this JTweenSequence sequence , EntityManager entityManager , float3 moveDelta , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void Move ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 moveDelta , float durationSeconds ) MoveTo \u00b6 MoveTo - moves Translation component to endPosition in durationSeconds Main thread API: MoveTo ( this JTweenSequence sequence , EntityManager entityManager , float3 endPosition , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void MoveTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 endPosition , float durationSeconds ) MoveCurve \u00b6 MoveCurve - moves Translation component by AnimationCurve in durationSeconds . You can specify animation curves for each coordinates separately Main thread API: public static void MoveCurve ( this JTweenSequence sequence , EntityManager entityManager , AnimationCurve x , AnimationCurve y , AnimationCurve z , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void MoveCurve ( this JTweenSequence sequence , EntityCommandBuffer commandBuffer , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , AnimationCurve x , AnimationCurve y , AnimationCurve z , float durationSeconds ) Rotate Tweens \u00b6 For rotation tweens you can set rotation angle in two ways: by euler angles in degrees or quaternions. Rotate \u00b6 Rotate - rotates Rotation component on rotationAngle in durationSeconds rotationAngle in degrees. Main thread API: public static void Rotate ( this JTweenSequence sequence , EntityManager entityManager , float3 rotationAngle , float duration , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) public static void Rotate ( this JTweenSequence sequence , EntityManager entityManager , quaternion rotationAngle , float duration , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void Rotate ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 rotationAngle , float duration ) public static void Rotate ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , quaternion rotationAngle , float duration ) RotateTo \u00b6 RotateTo - rotates Rotation component to rotationAngle in durationSeconds rotationAngle in degrees. Main thread API: public static void RotateTo ( this JTweenSequence sequence , EntityManager entityManager , float3 targetRotation , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) public static void RotateTo ( this JTweenSequence sequence , EntityManager entityManager , quaternion targetRotation , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RotateTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 targetRotation , float durationSeconds ) public static void RotateTo ( this JTweenSequence sequence , EntityManager entityManager , quaternion targetRotation , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Scale Tweens \u00b6 Scale \u00b6 Scale - scales NonUniformScale component by scaleDelta in durationSeconds . Main thread API: public static void Scale ( this JTweenSequence sequence , EntityManager entityManager , float3 scaleDelta , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void Scale ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 scaleDelta , float durationSeconds ) ScaleTo \u00b6 ScaleTo - scales NonUniformScale component to targetScale in durationSeconds . Main thread API: public static void ScaleTo ( this JTweenSequence sequence , EntityManager entityManager , float3 endScale , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void ScaleTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 endScale , float durationSeconds ) Shake Tweens \u00b6 Shake tweens use snoise to implementation of randomization. RandomShakePosition \u00b6 RandomShakePosition - shakes Translation component in durationSeconds with strength and frequency strength - The shake max distance relative to start point. You can specify different strength for each axis; frequency - specify how fast target change position. Main thread API: public static void RandomShakePosition ( this JTweenSequence sequence , EntityManager entityManager , float3 strength , float frequency , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RandomShakePosition ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 strength , float frequency , float durationSeconds ) RandomShakeRotation \u00b6 RandomShakeRotation - shakes Rotation component in durationSeconds with strength and frequency strength - The shake max angle, in degrees, relative to start angle. You can specify different strength for each axis; frequency - specify how fast target change angle. Main thread API: public static void RandomShakeRotation ( this JTweenSequence sequence , EntityManager entityManager , float3 strength , float frequency , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RandomShakeRotation ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 strength , float frequency , float durationSeconds ) RandomShakeScale \u00b6 RandomShakeScale - shakes NonUniformScale component in durationSeconds with strength and frequency strength - The shake max scale relative to start scale. You can specify different strength for each axis; frequency - specify how fast target change scale. minScale - if set, clamps bottom shake scale to this value. maxScale - if set, clamps upper shake scale to this value. minScale and maxScale can be used to prevent scales to negative values. It is convenient if object default scale is near 1 and scale strength is bigger than 1; Main thread API: public static void RandomShakeScale ( this JTweenSequence sequence , EntityManager entityManager , float3 strength , float frequency , float durationSeconds , float3 ? minScale = null , float3 ? maxScale = null , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RandomShakeScale ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 strength , float frequency , float durationSeconds , float3 ? minScale = null , float3 ? maxScale = null ) Color Tweens \u00b6 BaseColorTo \u00b6 BaseColorTo - lerp material _BaseColor property in durationSeconds to targetColor Main thread API: public static void BaseColorTo ( this JTweenSequence sequence , EntityManager entityManager , float4 targetColor , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void BaseColorTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float4 targetColor , float durationSeconds ) BaseColorGradient \u00b6 BaseColorGradient - lerp material _BaseColor property in durationSeconds by gradient value Main thread API: public static void BaseColorGradient ( this JTweenSequence sequence , EntityManager entityManager , Gradient gradient , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void BaseColorGradient ( this JTweenSequence sequence , EntityCommandBuffer commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , Gradient gradient , float durationSeconds )","title":"BuiltIn animations"},{"location":"BuiltInAnimations/#builtin-animations","text":"","title":"BuiltIn animations"},{"location":"BuiltInAnimations/#core","text":"JustTweenIt provides two different methods for builtIn animations: for the main thread and scheduled jobs. Methods for the main thread have optional parameters GameObjectConversionSystem conversionSystem and Component targetComponent . This parameters are used during conversion stage on ECS .","title":"Core"},{"location":"BuiltInAnimations/#move-tweens","text":"","title":"Move Tweens"},{"location":"BuiltInAnimations/#move","text":"Move - moves Translation component on moveDelta in durationSeconds Main thread API: public static void Move ( this JTweenSequence sequence , EntityManager entityManager , float3 moveDelta , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void Move ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 moveDelta , float durationSeconds )","title":"Move"},{"location":"BuiltInAnimations/#moveto","text":"MoveTo - moves Translation component to endPosition in durationSeconds Main thread API: MoveTo ( this JTweenSequence sequence , EntityManager entityManager , float3 endPosition , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void MoveTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 endPosition , float durationSeconds )","title":"MoveTo"},{"location":"BuiltInAnimations/#movecurve","text":"MoveCurve - moves Translation component by AnimationCurve in durationSeconds . You can specify animation curves for each coordinates separately Main thread API: public static void MoveCurve ( this JTweenSequence sequence , EntityManager entityManager , AnimationCurve x , AnimationCurve y , AnimationCurve z , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void MoveCurve ( this JTweenSequence sequence , EntityCommandBuffer commandBuffer , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , AnimationCurve x , AnimationCurve y , AnimationCurve z , float durationSeconds )","title":"MoveCurve"},{"location":"BuiltInAnimations/#rotate-tweens","text":"For rotation tweens you can set rotation angle in two ways: by euler angles in degrees or quaternions.","title":"Rotate Tweens"},{"location":"BuiltInAnimations/#rotate","text":"Rotate - rotates Rotation component on rotationAngle in durationSeconds rotationAngle in degrees. Main thread API: public static void Rotate ( this JTweenSequence sequence , EntityManager entityManager , float3 rotationAngle , float duration , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) public static void Rotate ( this JTweenSequence sequence , EntityManager entityManager , quaternion rotationAngle , float duration , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void Rotate ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 rotationAngle , float duration ) public static void Rotate ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , quaternion rotationAngle , float duration )","title":"Rotate"},{"location":"BuiltInAnimations/#rotateto","text":"RotateTo - rotates Rotation component to rotationAngle in durationSeconds rotationAngle in degrees. Main thread API: public static void RotateTo ( this JTweenSequence sequence , EntityManager entityManager , float3 targetRotation , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) public static void RotateTo ( this JTweenSequence sequence , EntityManager entityManager , quaternion targetRotation , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RotateTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 targetRotation , float durationSeconds ) public static void RotateTo ( this JTweenSequence sequence , EntityManager entityManager , quaternion targetRotation , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null )","title":"RotateTo"},{"location":"BuiltInAnimations/#scale-tweens","text":"","title":"Scale Tweens"},{"location":"BuiltInAnimations/#scale","text":"Scale - scales NonUniformScale component by scaleDelta in durationSeconds . Main thread API: public static void Scale ( this JTweenSequence sequence , EntityManager entityManager , float3 scaleDelta , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void Scale ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 scaleDelta , float durationSeconds )","title":"Scale"},{"location":"BuiltInAnimations/#scaleto","text":"ScaleTo - scales NonUniformScale component to targetScale in durationSeconds . Main thread API: public static void ScaleTo ( this JTweenSequence sequence , EntityManager entityManager , float3 endScale , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void ScaleTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 endScale , float durationSeconds )","title":"ScaleTo"},{"location":"BuiltInAnimations/#shake-tweens","text":"Shake tweens use snoise to implementation of randomization.","title":"Shake Tweens"},{"location":"BuiltInAnimations/#randomshakeposition","text":"RandomShakePosition - shakes Translation component in durationSeconds with strength and frequency strength - The shake max distance relative to start point. You can specify different strength for each axis; frequency - specify how fast target change position. Main thread API: public static void RandomShakePosition ( this JTweenSequence sequence , EntityManager entityManager , float3 strength , float frequency , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RandomShakePosition ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 strength , float frequency , float durationSeconds )","title":"RandomShakePosition"},{"location":"BuiltInAnimations/#randomshakerotation","text":"RandomShakeRotation - shakes Rotation component in durationSeconds with strength and frequency strength - The shake max angle, in degrees, relative to start angle. You can specify different strength for each axis; frequency - specify how fast target change angle. Main thread API: public static void RandomShakeRotation ( this JTweenSequence sequence , EntityManager entityManager , float3 strength , float frequency , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RandomShakeRotation ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 strength , float frequency , float durationSeconds )","title":"RandomShakeRotation"},{"location":"BuiltInAnimations/#randomshakescale","text":"RandomShakeScale - shakes NonUniformScale component in durationSeconds with strength and frequency strength - The shake max scale relative to start scale. You can specify different strength for each axis; frequency - specify how fast target change scale. minScale - if set, clamps bottom shake scale to this value. maxScale - if set, clamps upper shake scale to this value. minScale and maxScale can be used to prevent scales to negative values. It is convenient if object default scale is near 1 and scale strength is bigger than 1; Main thread API: public static void RandomShakeScale ( this JTweenSequence sequence , EntityManager entityManager , float3 strength , float frequency , float durationSeconds , float3 ? minScale = null , float3 ? maxScale = null , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void RandomShakeScale ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float3 strength , float frequency , float durationSeconds , float3 ? minScale = null , float3 ? maxScale = null )","title":"RandomShakeScale"},{"location":"BuiltInAnimations/#color-tweens","text":"","title":"Color Tweens"},{"location":"BuiltInAnimations/#basecolorto","text":"BaseColorTo - lerp material _BaseColor property in durationSeconds to targetColor Main thread API: public static void BaseColorTo ( this JTweenSequence sequence , EntityManager entityManager , float4 targetColor , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void BaseColorTo ( this JTweenSequence sequence , EntityCommandBuffer . Concurrent commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , float4 targetColor , float durationSeconds )","title":"BaseColorTo"},{"location":"BuiltInAnimations/#basecolorgradient","text":"BaseColorGradient - lerp material _BaseColor property in durationSeconds by gradient value Main thread API: public static void BaseColorGradient ( this JTweenSequence sequence , EntityManager entityManager , Gradient gradient , float durationSeconds , GameObjectConversionSystem conversionSystem = null , Component targetComponent = null ) Jobs API: public static void BaseColorGradient ( this JTweenSequence sequence , EntityCommandBuffer commandBuffer , int entityInQueryIndex , ref DynamicBuffer < JTweenCommandElement > sequenceCommandBuffer , Gradient gradient , float durationSeconds )","title":"BaseColorGradient"},{"location":"CreateUserCustomAnimation/","text":"Create user custom animation \u00b6","title":"Create user custom animations"},{"location":"CreateUserCustomAnimation/#create-user-custom-animation","text":"","title":"Create user custom animation"},{"location":"UnitTests/","text":"Unit Tests \u00b6","title":"Unit Tests"},{"location":"UnitTests/#unit-tests","text":"","title":"Unit Tests"}]}