{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JustTweenIt \u00b6 //TODO: add media icon here JustTweenIt is a high performance tween plugin for Unity. It is written on ECS architecture. The main goal of JustTweenIt is provide convenient and easy API to animate entities and user custom data in pure ECS style. ECS architecture and Data Oriented Stack provides better performance in comparison with regular OOP. More information about ECS you can find here","title":"Overview"},{"location":"#welcome-to-justtweenit","text":"//TODO: add media icon here JustTweenIt is a high performance tween plugin for Unity. It is written on ECS architecture. The main goal of JustTweenIt is provide convenient and easy API to animate entities and user custom data in pure ECS style. ECS architecture and Data Oriented Stack provides better performance in comparison with regular OOP. More information about ECS you can find here","title":"Welcome to JustTweenIt"},{"location":"BasicConcepts/","text":"Basic Concepts \u00b6 JTweenSequence \u00b6 In JustTweenIt each tween is represented as a sequence of animations. To create a tween you should create a sequence on target entity and add animations to it: var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); You can start, pause and stop playing sequence: moveSequence . Play ( dstManager ); moveSequence . Pause ( dstManager ); moveSequence . Stop ( dstManager ); moveSequence . DestroySequence ( dstManager ); Also you can setup sequence loop count and type: moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); JustTweenIt supports 3 types of loops: Loop; LoopReverse; PinPong; JTweenAnimation \u00b6 JTweenAnimation is a smallest peace of tween sequence. JustTweenIt provides several default animation implementations along with supporting custom user animations; In package you can find animations for: Transforms: Move; Rotate; Scale; Shake; Colors: Lerp; Gradients; JTween System Groups \u00b6 JTween providers serveral system groups to user custom animations, such as: JTweenSystemGroup - is a main group of the JustTweenIt plugin. All systems and system groups executed in this system group. This system group executes in the Unity default SimulationSystemGroup; JTweenInitAnimationsSystemGroup - this groups contains systems for initialization animations before playing such as caching previous object position or randomizing shake. JTweenUpdateAnimationsSystemGroup - this group contains systems with logic for updating animations, such as moving and rotation objects. JTweenFinishAnimationSystemGroup - in this group can be made additional logic after finishing animation and before starting next animation in sequence. Configure Tween In the Editor \u00b6 The easiest way way to create tween is to setup it in the Inspector. To do it, you should add JTweenSequenceAuthoring component on Game Object. After that you can add animations to the sequence in the Inspector menu. In plugin provided examples, scene 1: Example 1 - Configue tween from authoring components shows how to configure tweens in the scene. Create and run tweens from the main thread \u00b6 JustTweenIt creates sequence and animations in the main thread. In plugin provided examples, scene 2: Example 2 - Run tween from code in monobehavior shows how to create tween during conversion state. To create a sequence you should call AddSequences(EntityManager entityManager) method on an entity you want animate. public class ExampleRunTweenFromMonobehavior : MonoBehaviour , IConvertGameObjectToEntity { public void Convert ( Entity entity , EntityManager dstManager , GameObjectConversionSystem conversionSystem ) { var rotateSequence = entity . AddSequence ( dstManager ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( dstManager ); var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( dstManager ); var scaleSequence = entity . AddSequence ( dstManager ); scaleSequence . Scale ( dstManager , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( dstManager , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( dstManager ); var colorSequence = entity . AddSequence ( dstManager ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( dstManager ); } } Create and run tweens from the job system \u00b6 JustTweenIt also supports creating tweens in job system in parallel way. You can find this example in scene 3: Example 3 - Run tween from jobsystem Creating tweens in the job system is a bit faster than on the main thread. It happens because JustTweenIt makes some pre-calculation of the data before add it to the ECS. All structural changes happen in JTweenPlaySequenceCommandsSystem on the main thread. [UpdateInGroup(typeof(ExampleSystemsGroup))] public class ExampleRunTweenFromJobSystem : SystemBase { private JTweenBeginSimulationEntityCommandBufferSystem _commandBufferSystem ; protected override void OnCreate () { base . OnCreate (); _commandBufferSystem = World . GetExistingSystem < JTweenBeginSimulationEntityCommandBufferSystem >(); } protected override void OnUpdate () { var commandBuffer = _commandBufferSystem . CreateCommandBuffer (). ToConcurrent (); Entities . WithAll < ExampleTweenTarget >(). ForEach (( Entity entity , int entityInQueryIndex ) => { var moveSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var moveCommandBuffer ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer ); var rotateSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var rotateCommandBuffer ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer ); var scaleSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var scaleCommandBuffer ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer ); var colorSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var colorCommandBuffer ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer ); }). ScheduleParallel (); _commandBufferSystem . AddJobHandleForProducer ( Dependency ); Enabled = false ; //disable test system after running animation } } Process sequence callbacks \u00b6","title":"Basic concepts"},{"location":"BasicConcepts/#basic-concepts","text":"","title":"Basic Concepts"},{"location":"BasicConcepts/#jtweensequence","text":"In JustTweenIt each tween is represented as a sequence of animations. To create a tween you should create a sequence on target entity and add animations to it: var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); You can start, pause and stop playing sequence: moveSequence . Play ( dstManager ); moveSequence . Pause ( dstManager ); moveSequence . Stop ( dstManager ); moveSequence . DestroySequence ( dstManager ); Also you can setup sequence loop count and type: moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); JustTweenIt supports 3 types of loops: Loop; LoopReverse; PinPong;","title":"JTweenSequence"},{"location":"BasicConcepts/#jtweenanimation","text":"JTweenAnimation is a smallest peace of tween sequence. JustTweenIt provides several default animation implementations along with supporting custom user animations; In package you can find animations for: Transforms: Move; Rotate; Scale; Shake; Colors: Lerp; Gradients;","title":"JTweenAnimation"},{"location":"BasicConcepts/#jtween-system-groups","text":"JTween providers serveral system groups to user custom animations, such as: JTweenSystemGroup - is a main group of the JustTweenIt plugin. All systems and system groups executed in this system group. This system group executes in the Unity default SimulationSystemGroup; JTweenInitAnimationsSystemGroup - this groups contains systems for initialization animations before playing such as caching previous object position or randomizing shake. JTweenUpdateAnimationsSystemGroup - this group contains systems with logic for updating animations, such as moving and rotation objects. JTweenFinishAnimationSystemGroup - in this group can be made additional logic after finishing animation and before starting next animation in sequence.","title":"JTween System Groups"},{"location":"BasicConcepts/#configure-tween-in-the-editor","text":"The easiest way way to create tween is to setup it in the Inspector. To do it, you should add JTweenSequenceAuthoring component on Game Object. After that you can add animations to the sequence in the Inspector menu. In plugin provided examples, scene 1: Example 1 - Configue tween from authoring components shows how to configure tweens in the scene.","title":"Configure Tween In the Editor"},{"location":"BasicConcepts/#create-and-run-tweens-from-the-main-thread","text":"JustTweenIt creates sequence and animations in the main thread. In plugin provided examples, scene 2: Example 2 - Run tween from code in monobehavior shows how to create tween during conversion state. To create a sequence you should call AddSequences(EntityManager entityManager) method on an entity you want animate. public class ExampleRunTweenFromMonobehavior : MonoBehaviour , IConvertGameObjectToEntity { public void Convert ( Entity entity , EntityManager dstManager , GameObjectConversionSystem conversionSystem ) { var rotateSequence = entity . AddSequence ( dstManager ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( dstManager , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( dstManager ); var moveSequence = entity . AddSequence ( dstManager ); moveSequence . Move ( dstManager , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( dstManager , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( dstManager , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( dstManager ); var scaleSequence = entity . AddSequence ( dstManager ); scaleSequence . Scale ( dstManager , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( dstManager , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( dstManager ); var colorSequence = entity . AddSequence ( dstManager ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( dstManager , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( dstManager , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( dstManager ); } }","title":"Create and run tweens from the main thread"},{"location":"BasicConcepts/#create-and-run-tweens-from-the-job-system","text":"JustTweenIt also supports creating tweens in job system in parallel way. You can find this example in scene 3: Example 3 - Run tween from jobsystem Creating tweens in the job system is a bit faster than on the main thread. It happens because JustTweenIt makes some pre-calculation of the data before add it to the ECS. All structural changes happen in JTweenPlaySequenceCommandsSystem on the main thread. [UpdateInGroup(typeof(ExampleSystemsGroup))] public class ExampleRunTweenFromJobSystem : SystemBase { private JTweenBeginSimulationEntityCommandBufferSystem _commandBufferSystem ; protected override void OnCreate () { base . OnCreate (); _commandBufferSystem = World . GetExistingSystem < JTweenBeginSimulationEntityCommandBufferSystem >(); } protected override void OnUpdate () { var commandBuffer = _commandBufferSystem . CreateCommandBuffer (). ToConcurrent (); Entities . WithAll < ExampleTweenTarget >(). ForEach (( Entity entity , int entityInQueryIndex ) => { var moveSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var moveCommandBuffer ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , 5 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , - 5 , 0 ), 1f ); moveSequence . Move ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer , new float3 ( 0 , 0 , - 5 ), 1f ); moveSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . PinPong , - 1 ); moveSequence . Play ( commandBuffer , entityInQueryIndex , ref moveCommandBuffer ); var rotateSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var rotateCommandBuffer ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . Rotate ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer , new float3 ( 0 , 90 , 90 ), 0.25f ); rotateSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); rotateSequence . Play ( commandBuffer , entityInQueryIndex , ref rotateCommandBuffer ); var scaleSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var scaleCommandBuffer ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 ( 0.5f , 0.5f , 0.5f ), 1f ); scaleSequence . Scale ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer , new float3 (- 0.5f ,- 0.5f ,- 0.5f ), 1f ); scaleSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); scaleSequence . Play ( commandBuffer , entityInQueryIndex , ref scaleCommandBuffer ); var colorSequence = entity . AddSequence ( commandBuffer , entityInQueryIndex , out var colorCommandBuffer ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 1 , 1 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 1 , 0 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 1 , 0 , 1 ), 1f ); colorSequence . BaseColorTo ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer , new float4 ( 0 , 0 , 1 , 1 ), 1f ); colorSequence . SetLoop ( commandBuffer , entityInQueryIndex , JTweenSequenceLoopType . Loop , - 1 ); colorSequence . Play ( commandBuffer , entityInQueryIndex , ref colorCommandBuffer ); }). ScheduleParallel (); _commandBufferSystem . AddJobHandleForProducer ( Dependency ); Enabled = false ; //disable test system after running animation } }","title":"Create and run tweens from the job system"},{"location":"BasicConcepts/#process-sequence-callbacks","text":"","title":"Process sequence callbacks"},{"location":"BuiltInAnimations/","text":"BuiltIn animations \u00b6 Move Tweens \u00b6 Rotate Tweens \u00b6 Scale Tweens \u00b6 Shake Tweens \u00b6 Color Tweens \u00b6","title":"BuiltIn animations"},{"location":"BuiltInAnimations/#builtin-animations","text":"","title":"BuiltIn animations"},{"location":"BuiltInAnimations/#move-tweens","text":"","title":"Move Tweens"},{"location":"BuiltInAnimations/#rotate-tweens","text":"","title":"Rotate Tweens"},{"location":"BuiltInAnimations/#scale-tweens","text":"","title":"Scale Tweens"},{"location":"BuiltInAnimations/#shake-tweens","text":"","title":"Shake Tweens"},{"location":"BuiltInAnimations/#color-tweens","text":"","title":"Color Tweens"},{"location":"CreateUserCustomAnimation/","text":"Create user custom animation \u00b6","title":"Create user custom animations"},{"location":"CreateUserCustomAnimation/#create-user-custom-animation","text":"","title":"Create user custom animation"},{"location":"UnitTests/","text":"Unit Tests \u00b6","title":"Unit Tests"},{"location":"UnitTests/#unit-tests","text":"","title":"Unit Tests"}]}